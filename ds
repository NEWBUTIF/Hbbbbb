from hikkatl.types import Message
from .. import loader, utils
import asyncio

@loader.tds
class SpamBeautiful(loader.Module):
    """Этот модуль был создан что бы красиво спамить и настроить по своему и создатель @NEW_BUTIF"""
    strings = {
        "name": "SpamBeautiful",
        "start_spam": "Начинаю спамить {count} раз: {spam_message}",
        "invalid_args": "Использование: .spam1 <кол-во сообщений> <текст сообщения>",
        "invalid_count": "Первый аргумент должен быть числом.",
        "spam_stopped": "Спам остановлен.",
        "no_active_spam": "Нет активного спама.",
        "spam_stat": "Активный спам: {active}\nКоличество сообщений в цикле: {count}\nСообщение: {message}",
        "no_spam_active": "Нет активного спама."
    }

    def __init__(self):
        self._spam_task = None
        self._spam_count = 0
        self._spam_message = ""

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(
        ru_doc="Запуск спама сообщений.",
    )
    async def spam1(self, message: Message):
        """<кол-во сообщений> <текст сообщения> - Начать спамить"""
        args = utils.get_args_raw(message).split(maxsplit=2)
        if len(args) != 2:
            await utils.answer(message, self.strings("invalid_args"))
            return

        count, spam_message = args
        if not count.isdigit():
            await utils.answer(message, self.strings("invalid_count"))
            return

        count = int(count)
        self._spam_count = count
        self._spam_message = spam_message

        await utils.answer(message, self.strings("start_spam").format(count=count, spam_message=spam_message))
        self._spam_task = asyncio.create_task(self._spam_messages(message, count, spam_message))

    async def _spam_messages(self, message: Message, count: int, spam_message: str):
        while True:
            messages_to_delete = []
            for _ in range(count):
                msg = await self._client.send_message(message.peer_id, spam_message)
                messages_to_delete.append(msg)
                await asyncio.sleep(0.5 / 1000)  # 0.5 миллисекунды

            for msg in messages_to_delete:
                await msg.delete()

            await asyncio.sleep(1)  # Задержка перед следующим циклом

    @loader.command(
        ru_doc="Остановить спам сообщений.",
    )
    async def spam2(self, message: Message):
        """Остановить спам"""
        if self._spam_task and not self._spam_task.done():
            self._spam_task.cancel()
            self._spam_task = None
            await utils.answer(message, self.strings("spam_stopped"))
        else:
            await utils.answer(message, self.strings("no_active_spam"))

    @loader.command(
        ru_doc="Показать статус спама.",
    )
    async def spamstat(self, message: Message):
        """Показать статус активного спама"""
        if self._spam_task and not self._spam_task.done():
            await utils.answer(message, self.strings("spam_stat").format(active="Да", count=self._spam_count, message=self._spam_message))
        else:
            await utils.answer(message, self.strings("no_spam_active"))

# EOF
